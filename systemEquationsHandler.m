function systemEquations = systemEquationsHandler( ...
        state_equation, ...
        output_equation, ...
        dim_x, ...
        dim_y)

    % anonym. -> symbolic for Jacobian
    xk_prev_array = sym('xk_prev',[dim_x,1]);
    xk_array = sym('xk',[dim_x,1]);
    f = state_equation(xk_prev_array);
    h = output_equation(xk_array);
    
    white_noise = @(covar,dim,num_of_states) mvnrnd(zeros(dim,1), ...
        covar,num_of_states)';
    plant_with_noise = @(xk_prev,Q) state_equation(xk_prev) ...
        + white_noise(Q,dim_x,size(xk_prev,2));
    
    linear_system_matr = matlabFunction( ...
        jacobian(f,xk_prev_array) ...
        + 1e-100*xk_prev_array,'vars',{xk_prev_array}); % !!!
    linear_sensor_matr = matlabFunction( ...
        jacobian(h,xk_array) ...
        + 1e-100*sum(xk_array),'vars',{xk_array}); % !!!
    % @([xk_prev1,xk_prev2]) test(xk_prev1)
    systemEquations.plant_with_noise = plant_with_noise;
    systemEquations.plant_noiseless = state_equation;
    systemEquations.sensor_noiseless = output_equation;
    systemEquations.linear_system_matr = linear_system_matr;
    systemEquations.linear_sensor_matr = linear_sensor_matr;
end
